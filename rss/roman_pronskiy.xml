<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[Roman Pronskiy]]></title><description><![CDATA[ ]]></description><updated>2023-04-21T16:21:59+00:00</updated><entry><title type="html"><![CDATA[Generics via Attributes in PHP &mdash; Can We Have Them?]]></title><content type="html"><![CDATA[<p><strong>tl;dr:</strong> How about using generics in PHP attributes?</p>

<pre><code class="php">#[&lt;T&gt;]
class Stack
{
    public function push(#[&lt;T&gt;] mixed $item): void
    {
    }

    public function pop(): #[&lt;T&gt;] mixed
    {
    }
}
</code></pre>

<p>Native generics. Will they be in PHP or not? Does PHP need them at all? We'll leave this speculation for the next time, but today let's discuss what generics might look like in PHP attributes.</p>

<figure>
  <img src="https://pbs.twimg.com/media/Ffk5-9LWAAcZhwI?format=jpg" alt="Meme: Why can't we have generics in PHP?" width="300"/>
  <figcaption><a href="https://twitter.com/brendt_gd/status/1583360505766285314">https://twitter.com/brendt_gd/status/1583360505766285314</a></figcaption>
</figure>

<h2 id="status-phpdoc-quo">Status-PHPDoc-quo</h2>

<p>Nikita Popov did a comprehensive research on generics in PHP and shared detailed results <a href="https://github.com/PHPGenerics/php-generics-rfc/issues/45">here</a>. Nikita also wrote a summary on Reddit during an <a href="https://www.reddit.com/r/PHP/comments/j65968/ama_with_the_phpstorm_team_from_jetbrains_on/">AMA with the PhpStorm team</a>:</p>

<iframe id="reddit-embed" src="https://www.redditmedia.com/r/PHP/comments/j65968/ama_with_the_phpstorm_team_from_jetbrains_on/g83skiz/?depth=1&amp;showmore=false&amp;embed=true&amp;showmedia=false" sandbox="allow-scripts allow-same-origin allow-popups" style="border: none;" height="200" width="640" scrolling="no"></iframe>

<p>The conclusion that Nikita came to is that there are only three ways to implement generics, and none of them will work in PHP. Or rather, it is possible to implement them, but each of them has significant drawbacks.</p>

<p>Nevertheless, the implementation of erased quasi-generics already exists today. I'm talking about PHPDoc annotations.</p>

<p>Although there is no official standard, the popular static analyzers <a href="https://phpstan.org/">PHPStan</a> and <a href="https://psalm.dev/">Psalm</a>, as well as <a href="https://blog.jetbrains.com/phpstorm/2021/12/phpstorm-2021-3-release/#more_for_generics">PhpStorm</a>, support a syntax that can generally be called well-established.</p>

<figure>
  <img src="https://blog.jetbrains.com/wp-content/uploads/2021/12/generics_contructor.gif" alt=""/>
  <figcaption></figcaption>
</figure>

<p>What prevents people from using generics via annotations? I just posed this question on Twitter. They are, after all, essentially erased generics, pretty much like in Python, for instance.</p>

<p>There were some constructive and substantive concerns raised in the replies:</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Nothing stops me from using phpdoc generics, &amp; I use them, but without native language support, I can?t enforce them on downstream users of my libraries, so I still have to write a lot of validation code to check types.<br><br>I think this would also be a problem with erased generics.</p>&mdash; Ben Ramsey @ramsey@phpc.social (@ramsey) <a href="https://twitter.com/ramsey/status/1582461944401133568?ref_src=twsrc%5Etfw">October 18, 2022</a></blockquote>

<p>There were also comments about the usability of such generics. But what annoys me, and what the Twitter mob didn't note, is that in modern PHP code you have to use both attributes and PHPDoc annotations simultaneously.</p>

<h2 id="generics%2C-why-no-attributes%3F">Generics, why no attributes?</h2>

<p>The PHPDoc annotations are unstructured strings. They were <a href="https://wiki.php.net/rfc/attributes_v2">meant to be</a> replaced by attributes, which are part of the language, and set a strict format for metadata in PHP.</p>

<p>However, in the case of generics, the attributes look terrible:</p>

<pre><code class="php">/** @template T of object */
class Queue
{
    /** @var array&lt;int,T&gt; */
    private array $queue = [];

    /** @param T $item */
    public function add($item): void {}

    /** @return T */
    public function next() {}
}

// The same with current attributes =&gt; 

#[Template("T", "object")]
class Queue
{
    #[Type("array&lt;int,T&gt;")] 
    private array $queue = [];

    public function add(#[Type("T")] $item): void {}

    #[Type("T")]
    public function next() {}
}
</code></pre>

<p>In addition, the attributes only work on declarations but not on call-site. Consequently, you cannot do this:</p>

<pre><code class="php">/** @var Queue&lt;Person&gt; $personQueue */
$personQueue = new Queue();

// The same with current attributes =&gt;

#[Type("Queue&lt;Person&gt;")]
$personQueue = new Queue();
</code></pre>

<h2 id="generics-in-attributes-syntax-rfc">Generics in attributes syntax RFC</h2>

<p>What if generics looked prettier but remained in attributes?</p>

<pre><code class="php">#[&lt;T&gt;]
class Stack
{
    public function push(#[&lt;T&gt;] mixed $item): void
    {
    }

    public function pop(): #[&lt;T&gt;] mixed
    {
    }
}
</code></pre>

<h3 id="pros%3A">Pros:</h3>

<ul>
<li>PHP code remains untouched and BC breaks are not added</li>
<li>The code becomes cleaner and prettier (subjectively)</li>
<li>Static analyzers work as with PHPDoc</li>
<li>Information about generics is available in the language itself (!)</li>
</ul>

<h3 id="cons%3A">Cons:</h3>

<ul>
<li>Type information still in two places</li>
<li>Hacky syntax (?)</li>
<li>What else?</li>
</ul>

<h2 id="why-not-all-the-way-native-generics-with-%60%60%3F">Why not all the way native generics with <code>&lt;T&gt;</code>?</h2>

<p>Adding native erased generics we get to the inconsistency that some types are not checked at runtime. The attributes never gave a promise to change runtime behavior.</p>

<h2 id="but-what-about-runtime-checks%3F">But what about runtime checks?</h2>

<p>Since generics information is contained in attributes, it is available at runtime! This means that type checks <em>can</em> be implemented in userland in PHP. Such checks will probably be slower than the native ones, but the main advantage is that they can be entirely optional!</p>

<p>That means you can have early runtime checks in your local and test environments. For production you can disable such runtime checks and get performance boost there.</p>

<h2 id="%F0%9F%9A%A7-static-analysis-poc">ðŸš§ Static Analysis PoC</h2>

<p><strike>Here is a fork of Nikita's PHP parser that demonstrates this concept. And here is the PHPStan fork with the ability to use this syntax.</strike></p>

<h2 id="what-do-you-think%3F">What do you think?</h2>

<ul>
<li>How do you like this syntax?</li>
<li>What problems do you see with this?</li>
<li>What are other benefits and drawbacks?</li>
</ul>

<hr />

<p><br></p>

<p>Many thanks to Dave Liddament whose talk at the <a href="https://twitter.com/phpconference">International PHP Conference</a> in Munich inspired this idea. It literally came up during our discussion after Dave's talk:</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">It seems PHP generics is a hot topic at the moment. <a href="https://twitter.com/pronskiy?ref_src=twsrc%5Etfw">@pronskiy</a> following on from our conversation at IPC, has the syntax #&lt;&gt; been suggested? <br><br>Would this work for adding type information for static analysis?<br><br>See more in gist: <a href="https://t.co/IOzSGgt1Xo">https://t.co/IOzSGgt1Xo</a><br><br>1/n <a href="https://t.co/BHkqP3cr07">https://t.co/BHkqP3cr07</a> <a href="https://t.co/g2eIzm1ndT">pic.twitter.com/g2eIzm1ndT</a></p>&mdash; Dave Liddament (@DaveLiddament) <a href="https://twitter.com/DaveLiddament/status/1586726336961339392?ref_src=twsrc%5Etfw">October 30, 2022</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
]]></content><link href="https://pronskiy.com/blog/generics-via-attributes-in-php/"/><id>https://pronskiy.com/blog/generics-via-attributes-in-php/</id><pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate><author><name>Roman Pronskiy</name><uri>https://twitter.com/pronskiy</uri></author></entry></feed>
